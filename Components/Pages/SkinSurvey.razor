@page "/skinsurvey"
@using BlazorMediLab.Services
@using DataAccessLibrary.Models
@inject NavigationManager Navigation
@inject SurveyService SurveyService
@inject DataAccessLibrary.Data.NikayaDBContext Db

<h3>Skin Health Survey</h3>

@if (currentQuestion != null)
{
    <div class="question-box" @key="questionIndex">
        <p><strong>@currentQuestion.Question</strong></p>

        @foreach (var option in currentQuestion.Options)
        {
            <div>
                <input
                    type="checkbox"
                    @onchange="e => ToggleOption(currentQuestion, option, e.Value)"
                    checked="@currentQuestion.SelectedAnswers.Contains(option)" />
                <label>@option</label>
            </div>
        }
        <p><strong>Debug Index:</strong> @questionIndex</p>
        <p><strong>Selected Answers:</strong> @string.Join(", ", currentQuestion.SelectedAnswers)</p>

        <div class="buttons mt-3">
            @if (questionIndex > 0)
            {
                <button type="button" @onclick="GoBack">Back</button>
            }
            @if (questionIndex < questions.Count - 1)
            {
                <button type="button" @onclick="GoNext">Next</button>
            }
            else
            {
                <button
                    type="button"
                    @onclick="SubmitSurvey"
                    disabled="@(currentQuestion.SelectedAnswers.Count == 0)">
                    Submit
                </button>
            }
        </div>
    </div>
}
else
{
    <p>Loading questions...</p>
}

@code {
    private List<SkinSurveyQuestion> questions = new();
    private int questionIndex;
    private SkinSurveyQuestion? currentQuestion;

    protected override void OnInitialized()
    {
        questions = SurveyService.GetSkinSurveyQuestions();
        currentQuestion = questions[questionIndex];
    }

    private void GoNext()
    {
        if (questionIndex < questions.Count - 1)
        {
            questionIndex++;
            currentQuestion = questions[questionIndex];
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        if (questionIndex > 0)
        {
            questionIndex--;
            currentQuestion = questions[questionIndex];
            StateHasChanged();
        }
    }

    private void ToggleOption(SkinSurveyQuestion question, string option, object? checkedValue)
    {
        var isChecked = Convert.ToBoolean(checkedValue);
        if (isChecked && !question.SelectedAnswers.Contains(option))
            question.SelectedAnswers.Add(option);
        else if (!isChecked)
            question.SelectedAnswers.Remove(option);
    }

    private async Task SubmitSurvey()
    {
        var response = new SkinSurveyResponse
        {
            SkinType      = string.Join(", ", questions[0].SelectedAnswers),
            SkinConcerns  = string.Join(", ", questions[1].SelectedAnswers),
            ProductsUsed  = string.Join(", ", questions[2].SelectedAnswers),
            AgeGroup      = string.Join(", ", questions[3].SelectedAnswers)
        };

        Db.SkinSurveyResponses.Add(response);
        await Db.SaveChangesAsync();
        Navigation.NavigateTo("/thank-you");
    }
}